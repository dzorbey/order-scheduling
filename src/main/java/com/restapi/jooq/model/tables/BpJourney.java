/*
 * This file is generated by jOOQ.
 */
package com.restapi.jooq.model.tables;


import com.restapi.jooq.model.Keys;
import com.restapi.jooq.model.Public;
import com.restapi.jooq.model.tables.records.BpJourneyRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BpJourney extends TableImpl<BpJourneyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bp_journey</code>
     */
    public static final BpJourney BP_JOURNEY = new BpJourney();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BpJourneyRecord> getRecordType() {
        return BpJourneyRecord.class;
    }

    /**
     * The column <code>public.bp_journey.id</code>.
     */
    public final TableField<BpJourneyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.bp_journey.allocation_ratio</code>.
     */
    public final TableField<BpJourneyRecord, BigDecimal> ALLOCATION_RATIO = createField(DSL.name("allocation_ratio"), SQLDataType.NUMERIC(22, 10), this, "");

    /**
     * The column <code>public.bp_journey.arranged</code>.
     */
    public final TableField<BpJourneyRecord, Boolean> ARRANGED = createField(DSL.name("arranged"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.bp_journey.container1</code>.
     */
    public final TableField<BpJourneyRecord, Long> CONTAINER1 = createField(DSL.name("container1"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bp_journey.container2</code>.
     */
    public final TableField<BpJourneyRecord, Long> CONTAINER2 = createField(DSL.name("container2"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bp_journey.contanier3</code>.
     */
    public final TableField<BpJourneyRecord, Long> CONTANIER3 = createField(DSL.name("contanier3"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bp_journey.contanier4</code>.
     */
    public final TableField<BpJourneyRecord, Long> CONTANIER4 = createField(DSL.name("contanier4"), SQLDataType.BIGINT, this, "");

    private BpJourney(Name alias, Table<BpJourneyRecord> aliased) {
        this(alias, aliased, null);
    }

    private BpJourney(Name alias, Table<BpJourneyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bp_journey</code> table reference
     */
    public BpJourney(String alias) {
        this(DSL.name(alias), BP_JOURNEY);
    }

    /**
     * Create an aliased <code>public.bp_journey</code> table reference
     */
    public BpJourney(Name alias) {
        this(alias, BP_JOURNEY);
    }

    /**
     * Create a <code>public.bp_journey</code> table reference
     */
    public BpJourney() {
        this(DSL.name("bp_journey"), null);
    }

    public <O extends Record> BpJourney(Table<O> child, ForeignKey<O, BpJourneyRecord> key) {
        super(child, key, BP_JOURNEY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<BpJourneyRecord, Long> getIdentity() {
        return (Identity<BpJourneyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BpJourneyRecord> getPrimaryKey() {
        return Keys.PK_BP_JOURNEY;
    }

    @Override
    public List<UniqueKey<BpJourneyRecord>> getKeys() {
        return Arrays.<UniqueKey<BpJourneyRecord>>asList(Keys.PK_BP_JOURNEY);
    }

    @Override
    public BpJourney as(String alias) {
        return new BpJourney(DSL.name(alias), this);
    }

    @Override
    public BpJourney as(Name alias) {
        return new BpJourney(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BpJourney rename(String name) {
        return new BpJourney(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BpJourney rename(Name name) {
        return new BpJourney(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, BigDecimal, Boolean, Long, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
