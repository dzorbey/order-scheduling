/*
 * This file is generated by jOOQ.
 */
package com.restapi.jooq.model.tables.records;


import com.restapi.jooq.model.tables.BpOrder;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BpOrderRecord extends UpdatableRecordImpl<BpOrderRecord> implements Record2<Long, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.bp_order.id</code>.
     */
    public BpOrderRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.bp_order.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.bp_order.weight</code>.
     */
    public BpOrderRecord setWeight(BigDecimal value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.bp_order.weight</code>.
     */
    public BigDecimal getWeight() {
        return (BigDecimal) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, BigDecimal> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return BpOrder.BP_ORDER.ID;
    }

    @Override
    public Field<BigDecimal> field2() {
        return BpOrder.BP_ORDER.WEIGHT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public BigDecimal component2() {
        return getWeight();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public BigDecimal value2() {
        return getWeight();
    }

    @Override
    public BpOrderRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BpOrderRecord value2(BigDecimal value) {
        setWeight(value);
        return this;
    }

    @Override
    public BpOrderRecord values(Long value1, BigDecimal value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BpOrderRecord
     */
    public BpOrderRecord() {
        super(BpOrder.BP_ORDER);
    }

    /**
     * Create a detached, initialised BpOrderRecord
     */
    public BpOrderRecord(Long id, BigDecimal weight) {
        super(BpOrder.BP_ORDER);

        setId(id);
        setWeight(weight);
    }
}
