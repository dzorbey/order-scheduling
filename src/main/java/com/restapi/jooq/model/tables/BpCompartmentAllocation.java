/*
 * This file is generated by jOOQ.
 */
package com.restapi.jooq.model.tables;


import com.restapi.jooq.model.Keys;
import com.restapi.jooq.model.Public;
import com.restapi.jooq.model.tables.records.BpCompartmentAllocationRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BpCompartmentAllocation extends TableImpl<BpCompartmentAllocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bp_compartment_allocation</code>
     */
    public static final BpCompartmentAllocation BP_COMPARTMENT_ALLOCATION = new BpCompartmentAllocation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BpCompartmentAllocationRecord> getRecordType() {
        return BpCompartmentAllocationRecord.class;
    }

    /**
     * The column <code>public.bp_compartment_allocation.id</code>.
     */
    public final TableField<BpCompartmentAllocationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.bp_compartment_allocation.order_id</code>.
     */
    public final TableField<BpCompartmentAllocationRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bp_compartment_allocation.journey_id</code>.
     */
    public final TableField<BpCompartmentAllocationRecord, Long> JOURNEY_ID = createField(DSL.name("journey_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bp_compartment_allocation.weight</code>.
     */
    public final TableField<BpCompartmentAllocationRecord, BigDecimal> WEIGHT = createField(DSL.name("weight"), SQLDataType.NUMERIC(22, 10), this, "");

    /**
     * The column <code>public.bp_compartment_allocation.source</code>.
     */
    public final TableField<BpCompartmentAllocationRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.bp_compartment_allocation.destination</code>.
     */
    public final TableField<BpCompartmentAllocationRecord, String> DESTINATION = createField(DSL.name("destination"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.bp_compartment_allocation.fuel_type</code>.
     */
    public final TableField<BpCompartmentAllocationRecord, String> FUEL_TYPE = createField(DSL.name("fuel_type"), SQLDataType.VARCHAR, this, "");

    private BpCompartmentAllocation(Name alias, Table<BpCompartmentAllocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private BpCompartmentAllocation(Name alias, Table<BpCompartmentAllocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bp_compartment_allocation</code> table reference
     */
    public BpCompartmentAllocation(String alias) {
        this(DSL.name(alias), BP_COMPARTMENT_ALLOCATION);
    }

    /**
     * Create an aliased <code>public.bp_compartment_allocation</code> table reference
     */
    public BpCompartmentAllocation(Name alias) {
        this(alias, BP_COMPARTMENT_ALLOCATION);
    }

    /**
     * Create a <code>public.bp_compartment_allocation</code> table reference
     */
    public BpCompartmentAllocation() {
        this(DSL.name("bp_compartment_allocation"), null);
    }

    public <O extends Record> BpCompartmentAllocation(Table<O> child, ForeignKey<O, BpCompartmentAllocationRecord> key) {
        super(child, key, BP_COMPARTMENT_ALLOCATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<BpCompartmentAllocationRecord, Long> getIdentity() {
        return (Identity<BpCompartmentAllocationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BpCompartmentAllocationRecord> getPrimaryKey() {
        return Keys.PK_BP_COMPARTMENT_ALLOCATION;
    }

    @Override
    public List<UniqueKey<BpCompartmentAllocationRecord>> getKeys() {
        return Arrays.<UniqueKey<BpCompartmentAllocationRecord>>asList(Keys.PK_BP_COMPARTMENT_ALLOCATION);
    }

    @Override
    public BpCompartmentAllocation as(String alias) {
        return new BpCompartmentAllocation(DSL.name(alias), this);
    }

    @Override
    public BpCompartmentAllocation as(Name alias) {
        return new BpCompartmentAllocation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BpCompartmentAllocation rename(String name) {
        return new BpCompartmentAllocation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BpCompartmentAllocation rename(Name name) {
        return new BpCompartmentAllocation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, BigDecimal, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
